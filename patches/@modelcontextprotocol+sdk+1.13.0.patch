diff --git a/node_modules/@modelcontextprotocol/sdk/dist/cjs/server/stdio.js b/node_modules/@modelcontextprotocol/sdk/dist/cjs/server/stdio.js
index 0500c22..74f9b55 100644
--- a/node_modules/@modelcontextprotocol/sdk/dist/cjs/server/stdio.js
+++ b/node_modules/@modelcontextprotocol/sdk/dist/cjs/server/stdio.js
@@ -4,7 +4,7 @@ var __importDefault = (this && this.__importDefault) || function (mod) {
 };
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.StdioServerTransport = void 0;
-const node_process_1 = __importDefault(require("node:process"));
+const node_process_1 = __importDefault(require("process"));
 const stdio_js_1 = require("../shared/stdio.js");
 /**
  * Server transport for stdio: this communicates with a MCP client by reading from the current process' stdin and writing to stdout.
diff --git a/node_modules/@modelcontextprotocol/sdk/dist/cjs/server/streamableHttp.js b/node_modules/@modelcontextprotocol/sdk/dist/cjs/server/streamableHttp.js
index 31007d6..175db5a 100644
--- a/node_modules/@modelcontextprotocol/sdk/dist/cjs/server/streamableHttp.js
+++ b/node_modules/@modelcontextprotocol/sdk/dist/cjs/server/streamableHttp.js
@@ -7,7 +7,7 @@ exports.StreamableHTTPServerTransport = void 0;
 const types_js_1 = require("../types.js");
 const raw_body_1 = __importDefault(require("raw-body"));
 const content_type_1 = __importDefault(require("content-type"));
-const node_crypto_1 = require("node:crypto");
+const node_crypto_1 = require("crypto");
 const MAXIMUM_MESSAGE_SIZE = "4mb";
 /**
  * Server transport for Streamable HTTP: this implements the MCP Streamable HTTP transport specification.
@@ -328,7 +328,8 @@ class StreamableHTTPServerTransport {
             else if (hasRequests) {
                 // The default behavior is to use SSE streaming
                 // but in some cases server will return JSON responses
-                const streamId = (0, node_crypto_1.randomUUID)();
+                //const streamId = (0, node_crypto_1.randomUUID)();
+                const streamId = this.createUUID();
                 if (!this._enableJsonResponse) {
                     const headers = {
                         "Content-Type": "text/event-stream",
@@ -565,6 +566,20 @@ class StreamableHTTPServerTransport {
             }
         }
     }
+	createUUID() {
+	    // http://www.ietf.org/rfc/rfc4122.txt
+	    var s = [];
+	    var hexDigits = "0123456789abcdef";
+	    for (var i = 0; i < 36; i++) {
+		s[i] = hexDigits.substr(Math.floor(Math.random() * 0x10), 1);
+	    }
+	    s[14] = "4";  // bits 12-15 of the time_hi_and_version field to 0010
+	    s[19] = hexDigits.substr((s[19] & 0x3) | 0x8, 1);  // bits 6-7 of the clock_seq_hi_and_reserved to 01
+	    s[8] = s[13] = s[18] = s[23] = "-";
+
+	    var uuid = s.join("");
+	    return uuid;
+	}
 }
 exports.StreamableHTTPServerTransport = StreamableHTTPServerTransport;
 //# sourceMappingURL=streamableHttp.js.map
